# update time 2024-11-16
# version 4.3

x-local-time-zone:
#  - &use-local-time-zone /etc/timezone:/etc/timezone:ro
  - &use-local-time /etc/localtime:/etc/localtime:ro
x-custom-password: &use-custom-passwd ${DB_Password:-'pass_for_DB'} # please change the password in .env file or here
x-http-proxy: &use-custom-http-proxy clash:8080
x-common-logging: &common-logging
  logging:
    driver: "json-file"
    options:
      max-size: "10m"  # Maximum log file size (e.g., 10 megabytes)
      max-file: "3"    # Maximum number of log files to keep (e.g., 3 files)
services:
  ######################
  ##   Applications   ##
  ######################

  app.wewe:
    image: cooderl/wewe-rss-sqlite
    container_name: wewe-rss
    ports:
      - ${WEWE_RSS_PORT:-10084}:80
    networks:
      - net_public
    restart: always
    environment:
      - PORT=80
      # 数据库连接地址
      - DATABASE_URL=file:/app/data/wewe-rss.db
      - DATABASE_TYPE=sqlite
      # 服务接口请求授权码
      - AUTH_CODE=${WEWE_RSS_ADMIN_AUTH_CODE}
      # 提取全文内容模式
      - FEED_MODE=fulltext
      # 定时更新订阅源Cron表达式
      - CRON_EXPRESSION=35 5,17 * * *
      # 服务接口请求限制，每分钟请求次数
      - MAX_REQUEST_PER_MINUTE=60
      # 外网访问时，需设置为服务器的公网 IP 或者域名地址
      - SERVER_ORIGIN_URL=${WEWE_RSS_ADMIN_BASE_URL}
    volumes:
      # 映射数据库文件存储位置，容器重启后不丢失
      - /data/database/wewe-rss:/app/data
      - *use-local-time

  app.feedcraft:
    image: ghcr.io/colin-xkl/feed-craft
    container_name: feed-craft
    restart: always
#    ports:
#      - 10088:80  # 如果需要访问后台,暴露到公网,修改这里的端口
    networks:
      - net_private
      - net_public
    volumes:
      - *use-local-time
      - /data/database/feed-craft:/usr/local/feed-craft/db
    environment:
      PORT: 80  # 默认80, 同个网络下的容器可以通过 http://feed-craft/xxxx的形式访问
      FC_PUPPETEER_HTTP_ENDPOINT: http://service.browserless:3000
      FC_REDIS_URI: redis://service.redis:6379/

      #FC_OPENAI_AUTH_KEY: skxxxx
      #FC_OPENAI_DEFAULT_MODEL: chatgpt-3.5 # 默认使用的模型
      #FC_OPENAI_ENDPOINT: https://xxx # OPENAI API 或兼容平台的API接口路径

  app.ttrss:
    image: wangqiru/ttrss
    container_name: ttrss
    depends_on:
      - database.ttrss
      - service.clash
    ports:
      - ${TTRSS_PORT:-10080}:80/tcp # change the port if you need
    environment:
      SELF_URL_PATH: ${TTRSS_SELF_URL:?'The TTRSS self url value is required'} # please change to your own domain
      DISABLE_USER_IN_DAYS: 14
      ALLOW_PORTS: ${RSS_ALLOW_PORTS:-'80,443,3000'}
      # proxy
      HTTP_PROXY: *use-custom-http-proxy
      # database settings
      DB_HOST: database.ttrss
      DB_PORT: 5432
      DB_NAME: ttrss
      DB_USER: postgres
      DB_PASS: *use-custom-passwd
      ENABLE_PLUGINS: auth_internal,fever # auth_internal is required.
    networks:
      - net_public
      - net_private
    volumes:
 #     - *use-local-time-zone
      - *use-local-time
      - feed-favicon-cache:/var/www/cache/feed-icons
      - starred-image-cache:/var/www/cache/starred-images
      - plugin:/var/www/plugins.local
      - theme:/var/www/themes.local
    labels:
      - one.colinx.rssmanx.description='Tiny Tiny RSS is a free and open source web-based news feed (RSS/Atom) reader and aggregator'
    restart: always
    <<: *common-logging

  app.huginn:
    depends_on:
      - database.huginn
    # image: zhorvath83/huginn  # arm compatible, but not the latest version
    image: huginn/huginn
    container_name: huginn
    ports:
      - ${HUGINN_PORT:-10070}:80/tcp
    environment:
      DOMAIN: ${HOST}:${HUGINN_PORT:-10070}
      PORT: 80
      DEFAULT_HTTP_USER_AGENT: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.81 Safari/537.36"
      # database settings
      DATABASE_ADAPTER: postgresql
      DATABASE_HOST: database.huginn
      #      DATABASE_USERNAME: huginn
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: *use-custom-passwd
      DATABASE_PORT: 5432
    networks:
      - net_public
      - net_private
# 如果初始化时一直启动不了，日志报错连接不上 ruby gems, 可以进容器执行一下
# bundle config mirror.https://rubygems.org https://mirrors.ustc.edu.cn/rubygems/
# 设置为使用中科大的镜像源

#    dns:  # 有兼容性问题，一般不建议开启。
#      - 223.5.5.5
#      - 8.8.8.8
    restart: unless-stopped
    <<: *common-logging
    labels:
      - one.colinx.rssmanx.description='Huginn is a powerful IFTTT application'

  ######################
  ##     Databases    ##
  ######################
  database.ttrss: &common_db
    image: postgres:15-alpine # Lock major version
    container_name: ttrss_db
    expose:
      - 5432
    environment:
      POSTGRES_PASSWORD: *use-custom-passwd
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - ${DB_DIR:-~/.docker/Database}/DB_ttrss/:/var/lib/postgresql/data # persist db data
    networks:
      - net_private
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 6
    restart: always
    labels:
      - one.colinx.rssmanx.description='Database of Tiny Tiny RSS service'

  database.huginn:
    <<: *common_db
    container_name: huginn_db
    volumes:
      - ${DB_DIR:-~/.docker/Database}/DB_huginn/:/var/lib/postgresql/data # persist db data
    labels:
      - one.colinx.rssmanx.description='Database of Huginn'

  ######################
  ##     Services     ##
  ######################

  service.rsshub:
    image: diygod/rsshub
    container_name: rsshub
    depends_on:
      - service.redis
      - service.clash
    restart: on-failure:5
    # ports:
    #     - '1200:80' # 如果要把 rsshub 实例暴露在公网的话可以修改这里的设置
    environment:
      PORT: 80  # 指定rsshub 实例运行在容器的80端口，这样可以通过 http://rsshub/xxxxx 来访问
      # miscellaneous settings
      NODE_ENV: production
      CACHE_TYPE: redis
      REDIS_URL: redis://service.redis:6379/
      PUPPETEER_WS_ENDPOINT: ws://service.browserless:3000
      # use proxy
      PROXY_URI: socks5://clash:8085
      REQUEST_RETRY: 5
#       PROXY_STRATEGY: on_retry  # 作用：需要指定服务器先尝试直连再使用代理。不建议服务器在大陆地区的用户开启
    expose:
      - 80
    networks:
      - net_public
      - net_private
    dns:
      - 223.5.5.5
      - 8.8.8.8
    volumes:
#      - *use-local-time-zone
      - *use-local-time
    <<: *common-logging
    labels:
      com.centurylinklabs.watchtower.enable: 'true' # keep the rsshub up to date
      one.colinx.rssmanx.description: 'RSShub makes everything rssable'

  service.browserless: # dependency of rsshub
    image: browserless/chrome
    container_name: rsshub_browserless
    environment:
      USE_CHROME_STABLE: true
      DEFAULT_HEADLESS: false
    ulimits: # 禁止生成转储文件，避免耗尽磁盘空间
      core:
        hard: 0
        soft: 0
    restart: unless-stopped
    networks:
      - net_public
    labels:
      com.centurylinklabs.watchtower.enable: 'true' # keep rsshub up to date
      one.colinx.rssmanx.description: 'This is one of the rsshub dependencies'

  service.redis: # dependency of rsshub
    image: redis:6-alpine
    container_name: rsshub_redis
    networks:
      - net_private
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: always
    labels:
      com.centurylinklabs.watchtower.enable: 'true' # keep rsshub up to date
      one.colinx.rssmanx.description: 'This is one of the rsshub dependencies'

  service.mercury:
    # set Mercury Parser API endpoint to `service.mercury:3000` in TTRSS plugin setting page
    image: wangqiru/mercury-parser-api
    container_name: ttrss_mercury
    expose:
      - 3000
    environment:
      NODE_ENV: production
      HTTP_PROXY: *use-custom-http-proxy
      HTTPS_PROXY: *use-custom-http-proxy
    networks:
      - net_public
    labels:
      one.colinx.rssmanx.description: 'A plugin of TTRSS that can help you get fulltext of the RSS link'
    restart: always

  service.opencc:
    # set OpenCC API endpoint to `service.opencc:3000` in TTRSS plugin setting page
    #    image: wangqiru/opencc-api-server
    image: colinxkl/opencc-api-go # another opencc api server written in golang
    container_name: ttrss_opencc
    expose:
      - 3000
    networks:
      - net_private
    labels:
      one.colinx.rssmanx.description: 'A plugin of TTRSS, translation between Traditional Chinese and Simplified Chinese'
    restart: unless-stopped

  service.clash:
#    image: dreamacro/clash:v1.18.0 # lock the version as the original author has abandoned the repo
    image: metacubex/mihomo 
    container_name: clash
    networks:
      - net_public
    volumes:
#      - ./config.yaml:/root/.config/clash/config.yaml:ro
      - ./config.yaml:/root/.config/mihomo/config.yaml:ro
#      - clash-data:/root/.config/clash
      - clash-data-mihomo:/root/.config/mihomo
#      - *use-local-time-zone
      - *use-local-time
    labels:
      one.colinx.rssmanx.description: 'A flexible and powerful forward proxy'
    restart: always
    <<: *common-logging

  ######################
  ##     Utilities    ##
  ######################
  utility.watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    environment:
      WATCHTOWER_CLEANUP: true
      WATCHTOWER_LABEL_ENABLE: true # only update containers with flags
      WATCHTOWER_SCHEDULE: 0 0 4 * * * # update everyday at midnight
      WATCHTOWER_INCLUDE_STOPPED: true
      WATCHTOWER_REVIVE_STOPPED: true # restart stopped rsshub after an update if it crashed
      TZ: Asia/Shanghai # use TZ string set time zone. we won't need binding tz volume anymore
    networks:
      - net_public
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      one.colinx.rssmanx.description: 'A tool to make your docker containers up to date.'
    restart: unless-stopped

volumes:
  redis-data:
  feed-favicon-cache:
  starred-image-cache:
  plugin:
  theme:
  clash-data-mihomo:

networks:
  net_public:
  net_private:
    internal: true
